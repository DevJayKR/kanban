// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  password     String
  refreshToken String?
  teams        Team[]   @relation(name: "TeamMembers")
  teamLeads    Team[]   @relation(name: "TeamLeaders")
  invites      Invite[]
  tickets      Ticket[]
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  leader    User?    @relation("TeamLeaders", fields: [leaderId], references: [id])
  leaderId  Int?
  members   User[]   @relation("TeamMembers")
  invites   Invite[]
  columns   Column[]
}

model Invite {
  id        Int     @id @default(autoincrement())
  team      Team    @relation(fields: [teamId], references: [id])
  teamId    Int
  invitee   User    @relation(fields: [inviteeId], references: [id])
  inviteeId Int
  accept    Boolean @default(false)
}

model Column {
  id        Int      @id @default(autoincrement())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    Int
  name      String
  tickets   Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int
}

model Ticket {
  id         Int        @id @default(autoincrement())
  column     Column     @relation(fields: [columnId], references: [id])
  columnId   Int
  order      Int
  info       TicketInfo @relation(fields: [infoId], references: [id])
  infoId     Int
  assignee   User?      @relation(fields: [assigneeId], references: [id])
  assigneeId Int?
}

model TicketInfo {
  id        Int       @id @default(autoincrement())
  title     String
  tag       Tag
  dueTime   Float?
  dueDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  ticket    Ticket[]
}

enum Tag {
  Frontend
  Backend
  Design
  QA
  PM
  Document
}
